# -*- coding: utf-8 -*-
"""MLT12.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1p7j-8u4SRT0NDlPYgfyiyYgy2vc2BueQ
"""

import pandas as pd
import numpy as np
import tensorflow as tf
from tensorflow import keras
from tensorflow.keras import layers
import matplotlib.pyplot as plt

fashion = pd.read_csv('/content/fashion_products.csv')

fashion

fashion.info()

print('Banyak data: ', len(fashion["Product ID"].unique()))
print('Jenis Pembayaran yang diterima: ', fashion["Product Name"].unique())

print('Banyak data: ', len(fashion["User ID"].unique()))
print('Jenis Pembayaran yang diterima: ', fashion["Size"].unique())

print('Banyak data: ', len(fashion["Price"].unique()))
print('Jenis Pembayaran yang diterima: ', fashion["Brand"].unique())

print('Banyak data: ', len(fashion["Rating"].unique()))
print('Jenis Pembayaran yang diterima: ', fashion["Category"].unique())
print('Jenis Pembayaran yang diterima: ', fashion["Color"].unique())

fashion[fashion['Product Name'] == 'Shoes']

fashion.duplicated().sum()

fashion.isnull().sum()

# Mengubah User ID menjadi list tanpa nilai yang sama
user_ids = fashion['User ID'].unique().tolist()
print('list User ID: ', user_ids)

# Melakukan encoding User ID
user_to_user_encoded = {x: i for i, x in enumerate(user_ids)}
print('encoded User ID : ', user_to_user_encoded)

# Melakukan proses encoding angka ke ke User ID
user_encoded_to_user = {i: x for i, x in enumerate(user_ids)}
print('encoded angka ke User ID: ', user_encoded_to_user)

# Mengubah Product ID menjadi list tanpa nilai yang sama
produk_ids = fashion['Product ID'].unique().tolist()

# Melakukan proses encoding Product ID
produk_to_produk_encoded = {x: i for i, x in enumerate(produk_ids)}

# Melakukan proses encoding angka ke Produk ID
produk_encoded_to_produk = {i: x for i, x in enumerate(produk_ids)}

# Mapping userID ke dataframe user
fashion['Pembeli'] = fashion['User ID'].map(user_to_user_encoded)

# Mapping placeID ke dataframe produk
fashion['Jumlah Produk'] = fashion['Product ID'].map(produk_to_produk_encoded)

# Mendapatkan jumlah pembeli
num_users = len(user_to_user_encoded)
print(num_users)

# Mendapatkan jumlah product yang dibeli oleh pelanggan
num_produk = len(produk_encoded_to_produk)
print(num_produk)

# Mengubah rating menjadi nilai float
fashion['Rating'] = fashion['Rating'].values.astype(np.float32)

# Nilai minimum rating
min_rating = min(fashion['Rating'])

# Nilai maksimal rating
max_rating = max(fashion['Rating'])

print('Number of User: {}, Number of Produk ID: {}, Min Rating: {}, Max Rating: {}'.format(
    num_users, num_produk, min_rating, max_rating
))

fashion = fashion.sample(frac=1, random_state=42)
fashion

# Membuat variabel x untuk mencocokkan data User ID dan Product ID menjadi satu value
x = fashion[['Pembeli', 'Jumlah Produk']].values

# Membuat variabel y untuk membuat rating dari hasil
y = fashion['Rating'].apply(lambda x: (x - min_rating) / (max_rating - min_rating)).values

# Membagi menjadi 80% data train dan 20% data validasi
train_indices = int(0.8 * fashion.shape[0])
x_train, x_val, y_train, y_val = (
    x[:train_indices],
    x[train_indices:],
    y[:train_indices],
    y[train_indices:]
)

print(x, y)

class RecommenderNet(tf.keras.Model):

  # Insialisasi fungsi
  def __init__(self, num_users, num_produk, embedding_size, **kwargs):
    super(RecommenderNet, self).__init__(**kwargs)
    self.num_users = num_users
    self.num_produk = num_produk
    self.embedding_size = embedding_size
    self.user_embedding = layers.Embedding( # layer embedding user
        num_users,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.user_bias = layers.Embedding(num_users, 1) # layer embedding user bias
    self.produk_embedding = layers.Embedding( # layer embeddings prduk
        num_produk,
        embedding_size,
        embeddings_initializer = 'he_normal',
        embeddings_regularizer = keras.regularizers.l2(1e-6)
    )
    self.produk_bias = layers.Embedding(num_produk, 1) # layer embedding produk bias

  def call(self, inputs):
    user_vector = self.user_embedding(inputs[:,0]) # memanggil layer embedding 1
    user_bias = self.user_bias(inputs[:, 0]) # memanggil layer embedding 2
    produk_vector = self.produk_embedding(inputs[:, 1]) # memanggil layer embedding 3
    produk_bias = self.produk_bias(inputs[:, 1]) # memanggil layer embedding 4

    dot_user_produk = tf.tensordot(user_vector, produk_vector, 2)

    x = dot_user_produk + user_bias + produk_bias

    return tf.nn.sigmoid(x) # activation sigmoid

model = RecommenderNet(num_users, num_produk, 50) # inisialisasi model

# model compile
model.compile(
    loss = tf.keras.losses.BinaryCrossentropy(),
    optimizer = keras.optimizers.Adam(learning_rate=0.0001),
    metrics=[tf.keras.metrics.RootMeanSquaredError()]
)

history = model.fit(
    x = x_train,
    y = y_train,
    batch_size = 8,
    epochs = 200,
    validation_data = (x_val, y_val)
)

plt.plot(history.history['root_mean_squared_error'])
plt.plot(history.history['val_root_mean_squared_error'])
plt.title('model_metrics')
plt.ylabel('root_mean_squared_error')
plt.xlabel('epoch')
plt.legend(['train', 'test'], loc='upper left')
plt.show()

# Mengonversi data series ‘Product ID’ menjadi dalam bentuk list
product_id = fashion['Product ID'].tolist()

# Mengonversi data series ‘Brand’ menjadi dalam bentuk list
produk_brand = fashion['Brand'].tolist()

# Mengonversi data series ‘Product Name’ menjadi dalam bentuk list
produk_name = fashion['Product Name'].tolist()

print(len(product_id))
print(len(produk_brand))
print(len(produk_name))

# Membuat dictionary untuk data ‘resto_id’, ‘resto_name’, dan ‘cuisine’
produk_new = pd.DataFrame({
    'id': product_id,
    'brand': produk_brand,
    'produk': produk_name
})
produk_new

produk_df = produk_new
df = pd.read_csv('/content/fashion_products.csv')

# Mengambil sample user
user_id = df["User ID"].sample(1).iloc[0]
buy_by_user = df[df["User ID"] == user_id]

# Operator bitwise (~), bisa diketahui di sini https://docs.python.org/3/reference/expressions.html
produk_tdk_beli = produk_df[~produk_df['id'].isin(buy_by_user["Product ID"].values)]['id']
produk_tdk_beli = list(
    set(produk_tdk_beli)
    .intersection(set(produk_to_produk_encoded.keys()))
)

produk_tdk_beli = [[produk_to_produk_encoded.get(x)] for x in produk_tdk_beli]
user_encoder = user_to_user_encoded.get(user_id)
user_produk_array = np.hstack(
    ([[user_encoder]] * len(produk_tdk_beli), produk_tdk_beli)
)

ratings = model.predict(user_produk_array).flatten()

top_ratings_indices = ratings.argsort()[-10:][::-1]
recommended_produk_ids = [
    produk_encoded_to_produk.get(produk_tdk_beli[x][0]) for x in top_ratings_indices
]

print('Showing recommendations for users: {}'.format(user_id))
print('===' * 9)
print('produk with high ratings from user')
print('----' * 8)

top_produk_user = (
    buy_by_user.sort_values(
        by = 'Rating',
        ascending=False
    )
    .head(5)
    ["Product ID"].values
)

produk_df_rows = produk_df[produk_df['id'].isin(top_produk_user)]
for row in produk_df_rows.itertuples():
    print(row.produk, ':', row.brand)

print('----' * 8)
print('Top 10 produk recommendation')
print('----' * 8)

recommended_produk = produk_df[produk_df['id'].isin(recommended_produk_ids)]
for row in recommended_produk.itertuples():
    print(row.produk, ':', row.brand)